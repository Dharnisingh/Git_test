
1: binary literals
==================
 # Binary literals provide a convenient way to represent a base-2 number. 
 # It is also possible to separate digits with '
 
 int b = 0b101010; // C++14
 int b = 0b1111'1111 // == 255
 auto b = 0b1111 // 15
 cout << "Binary value of b " << b << endl; // display decimal value of b

2: digin separator
=================
 # use single quotation(') mark to separate decimal digits
 # There is no rule for using this digit separation, means it can be used anywhere to separate.

 long dec_val = 1'048'567; // 1048567
 auto dec_val = 2'3'4; // 234

 cout << "Digit separator value : " << dec_val << endl;

3: Generic/Polymorphic Lambda
=============================
 # auto variable is allowed in parameter list of labda
Ex1:
 auto identity = [](auto x) { return x; };
 int three = identity(3); // == 3
 std::string foo = identity("foo"); // == "foo"

4: Lambda capture initializers
==============================
 # This allows creating lambda captures initialized with arbitrary expressions.
 # variables in the enclosing scopes and introduces a new name inside the lambda body
 # The initializing expression is evaluated when the lambda is created (not when it is invoked).
 # we can now capture move-only types in a lambda by value

 Ex:1
 int factory(int i) { return i * 10; }
 auto f = [x = factory(2)] { return x; }; // returns 20

 Ex2:
 auto generator = [x = 0] () mutable {
 // this would not compile without 'mutable' as we are modifying x on each call
  return x++;
 };
 auto a = generator(); // == 0
 auto b = generator(); // == 1
 auto c = generator(); // == 2

 Ex3:
 auto p = std::make_unique<int>(1);

 auto task1 = [=] { *p = 5; }; // ERROR: std::unique_ptr cannot be copied
 // vs.
 auto task2 = [p = std::move(p)] { *p = 5; }; // OK: p is move-constructed into the closure object
 // the original p is empty after task2 is created

 Ex4:
 auto x = 1;
 auto f = [&r = x, x = x * 10] {
   ++r;
 return r + x;
 };
 f(); // sets x to 2 and returns 12

5: Return type deduction
========================
 # Using an auto return type in C++14, the compiler will attempt to deduce the type for you.
 # With lambdas, you can now deduce its return type using auto, which makes returning a deduced reference or rvalue reference possible
 # 
 Ex1:
 // Deduce return type as `int`.
 auto f(int i) {
  return i;
 }
 Ex2:
 template <typename T>
 auto& f(T& t) {
  return t;
 }
 // Returns a reference to a deduced type.
 auto g = [](auto& x) -> auto& { return f(x); };
 int y = 123;
 int& z = g(y); // reference to `y`

6: decltype(auto)
=================
 #  It deduces return types while keeping their references and cv-qualifiers, while auto will not
 Ex1:
 const int x = 0;
 auto x1 = x; // int
 decltype(auto) x2 = x; // const int
 int y = 0;
 int& y1 = y;
 auto y2 = y1; // int
 decltype(auto) y3 = y1; // int&
 int&& z = 0;
 auto z1 = std::move(z); // int
 decltype(auto) z2 = std::move(z); // int&&

 Ex2:
 // Note: Especially useful for generic code!

 // Return type is `int`.
 auto f(const int& i) {
 return i;
 }

 // Return type is `const int&`.
 decltype(auto) g(const int& i) {
 return i;
 }

 int x = 123;
 static_assert(std::is_same<const int&, decltype(f(x))>::value == 0);
 static_assert(std::is_same<int, decltype(f(x))>::value == 1);
 static_assert(std::is_same<const int&, decltype(g(x))>::value == 1);

7: Variable templates
=====================
 # C++14 allows variables to be templated
 # if T is int then it will hold just 3
 # if T is float it will hold with precision
 template<class T>
 constexpr T pi = T(3.1415926535897932385);
 or T pi = T(3.1415926535897932385);

 template<class T>
 constexpr T e  = T(2.7182818284590452353);

8: Deprecated attribute:
========================
 # Mark function as outdated as we might go for generic template based function but this funtion can still be used.
 # we can include user defined warning message for deprecated method
 # can be used with following:
 1: class, struct, union, enum
 2: typedef
 3: variable
 4: non-static data member
 5: function 
 6: namespace
 7: template specialization

 Ex1:
  [[deprecated]]
  int add(int a, int b) {return a+b;} // Compile will give warning : 'add' is deprecated

 Ex2:
  [[deprecated("This is user defined warning message about function")]]
  int add(int a, int b) {return a+b;} // Compiler will give user defined warning message.

C++ 14 Library features:
========================
 1: User-defined literals for standard library types:
 ----------------------------------------------------
 # New user-defined literals for standard library types, including new built-in literals for chrono and basic_string. 
 # These can be constexpr meaning they can be used at compile-time.
 Ex1:
 using namespace std::chrono_literals;
 auto day = 24h;
 day.count(); // == 24
 std::chrono::duration_cast<std::chrono::minutes>(day).count(); // == 1440

 2: Compile-time integer sequences:
 ----------------------------------
 # The class template std::integer_sequence represents a compile-time sequence of integers.
 # std::make_integer_sequence<T, N> - creates a sequence of 0, ..., N - 1 with type T.
 # std::index_sequence_for<T...> - converts a template parameter pack into an integer sequence.

 Ex1:
 template<typename Array, std::size_t... I>
 decltype(auto) a2t_impl(const Array& a, std::integer_sequence<std::size_t, I...>) {
  return std::make_tuple(a[I]...);
 }

 template<typename T, std::size_t N, typename Indices = std::make_index_sequence<N>>
 decltype(auto) a2t(const std::array<T, N>& a) {
  return a2t_impl(a, Indices());
 }

 3: std::make_unique
 -------------------
 # std::make_unique is the recommended way to create instances of std::unique_ptrs due to the following reasons
 1: Avoid having to use the new operator.
 2: Prevents code repetition when specifying the underlying type the pointer shall hold.
 3: Most importantly, it provides exception-safety. Suppose we were calling a function foo like so:
 Ex1: foo(std::unique_ptr<T>{new T{}}, function_that_throws(), std::unique_ptr<T>{new T{}});
 NOTE:
 The compiler is free to call new T{}, then function_that_throws(), and so on... 
 Since we have allocated data on the heap in the first construction of a T, 
 we have introduced a leak here. With std::make_unique, we are given exception-safety:
 foo(std::make_unique<T>(), function_that_throws(), std::make_unique<T>());


References:
===========
https://github.com/AnthonyCalandra/modern-cpp-features/blob/master/CPP14.md#compile-time-integer-sequences 